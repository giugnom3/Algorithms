# -*- coding: utf-8 -*-
"""Peak_finding_algo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xE0DEdS_6I7j10_9Py-cD725yQCHqfXO

Peak Finding Algorithm with Calculation Counters

Linear Scan Method with Calculation Count
"""

linear_count = 0

def find_peak_linear(arr):
  global linear_count
  linear_count = 0
  n = len(arr)
  for i in range(n):
      linear_count += 1 # Counting the comparison
      if (i== 0 or arr[i]>= arr[i - 1]) and (i == n - 1 or arr[i]>= arr[i + 1]):
        return arr[i]
  return None

"""Divide-and-Conquer Method with Calculation Count


"""

divide_conquer_count = 0

def find_peak_divide_conquer(arr, low, high):
    global divide_conquer_count
    divide_conquer_count = 0

    def helper(arr, low, high):
      global divide_conquer_count
      mid = (low + high) // 2
      divide_conquer_count += 1 # Counting the comparison
      n = len(arr)

      if (mid == 0 or arr[mid]>= arr[mid - 1]) and (mid == n - 1 or arr[mid]>= arr[mid +1]):
          return arr[mid]
      elif mid > 0 and arr[mid - 1] > arr[mid]:
        return helper(arr, low, mid - 1)
      else:
        return helper(arr, mid + 1, high)

    return helper(arr, low, high)

"""Example Usage with Calculation Counts"""

import numpy as np

# Example arrays
arr1 = [1, 3, 20, 4, 1]
arr2 = [1, 3, 5, 7, 9, 11, 13, 15]
arr3 = [10, 20, 15, 2, 23, 90, 67]
arr4 = [20, 30, 15, 4, 5, 99, 45]
arr5 = [50, 30, 25, 2, 4, 40, 60]
arr6 = [100, 90, 80, 3, 44, 96, 2]

# Finding peaks and counting calcuations
peak_linear_1 = find_peak_linear(arr1)
peak_divide_conquer_1 = find_peak_divide_conquer(arr1,0,len(arr1) - 1)
print(f"Peak in arr1 (linear): {peak_linear_1}, Calculations: {linear_count}")
print(f"Peak in arr1 (divide-conquer): {peak_divide_conquer_1}, Calculations: {divide_conquer_count}")
print("")

peak_linear_2 = find_peak_linear(arr2)
peak_divide_conquer_2 = find_peak_divide_conquer(arr2,0,len(arr2) - 1)
print(f"Peak in arr2 (linear): {peak_linear_2}, Calculations: {linear_count}")
print(f"Peak in arr2 (divide-conquer): {peak_divide_conquer_2}, Calculations: {divide_conquer_count}")
print("")

peak_linear_3 = find_peak_linear(arr3)
peak_divide_conquer_3 = find_peak_divide_conquer(arr3,0,len(arr3) - 1)
print(f"Peak in arr3 (linear): {peak_linear_3}, Calculations: {linear_count}")
print(f"Peak in arr3 (divide-conquer): {peak_divide_conquer_3}, Calculations: {divide_conquer_count}")

peak_linear_4 = find_peak_linear(arr4)
peak_divide_conquer_4 = find_peak_divide_conquer(arr3,0,len(arr4) - 1)
print(f"Peak in arr4 (linear): {peak_linear_3}, Calculations: {linear_count}")
print(f"Peak in arr4 (divide-conquer): {peak_divide_conquer_4}, Calculations: {divide_conquer_count}")

peak_linear_5 = find_peak_linear(arr5)
peak_divide_conquer_5 = find_peak_divide_conquer(arr3,0,len(arr5) - 1)
print(f"Peak in arr5 (linear): {peak_linear_3}, Calculations: {linear_count}")
print(f"Peak in arr5 (divide-conquer): {peak_divide_conquer_5}, Calculations: {divide_conquer_count}")

peak_linear_6 = find_peak_linear(arr6)
peak_divide_conquer_6 = find_peak_divide_conquer(arr3,0,len(arr6) - 1)
print(f"Peak in arr6 (linear): {peak_linear_3}, Calculations: {linear_count}")
print(f"Peak in arr6 (divide-conquer): {peak_divide_conquer_6}, Calculations: {divide_conquer_count}")

from graphviz import Digraph
# Create a new directed graph