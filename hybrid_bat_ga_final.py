# -*- coding: utf-8 -*-
"""Hybrid_Bat_GA_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1icz3vd2-x9E_mph_tTs37C7OBTd87fe4
"""

# data source
from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import cv2
from skimage.metrics import structural_similarity as ssim, peak_signal_noise_ratio as psnr
import random

# Initialize bat-genetic algorithm parameters
num_bats = 50
max_iterations = 100
freq_min = 0
freq_max = 2
Loudness = 1
Pulse_rate = 0.5

# Initialize GA parameters
mutation_rate = 0.01
crossover_rate = 0.8

# PSNR Fitness function
def calculate_fitness(original, denoised):
    return psnr(original, denoised)

# Bat Algorithm step
def bat_algorithm_update_position(bats, global_best, frequency, velocity):
    new_bats = []
    for i in range(len(bats)):
        # Convert velocity[i] to float64 for the calculation
        velocity[i] = velocity[i].astype(np.float64)
        velocity[i] += (bats[i] - global_best) * frequency
        bats[i] = bats[i] + velocity[i]

        # Convert bats[i] back to uint8 before appending
        bats[i] = bats[i].astype(np.uint8)
        new_bats.append(bats[i])
    return new_bats

# Genetic Algorithm step (Crossover)
def crossover(parent1, parent2):
    child = parent1.copy()
    if random.random() < crossover_rate:
        crossover_point = random.randint(0, len(parent1) - 1)
        child[crossover_point:] = parent2[crossover_point:]
    return child

# Genetic Algorithm step (Mutation)
def mutate(child):
    if random.random() < mutation_rate:
        mutation_point = random.randint(0, len(child) - 1)
        child[mutation_point] = np.random.uniform()
    return child

# Apply Filters and Initialize Population
def apply_filters(image):
    filters = [cv2.GaussianBlur, cv2.medianBlur, cv2.bilateralFilter, cv2.fastNlMeansDenoising]
    population = []
    for f in filters:
        # Apply each filter with random parameters
        if f == cv2.GaussianBlur:
            denoised_img = f(image, (5, 5), 0)
        elif f == cv2.medianBlur:
            denoised_img = f(image, 5)
        elif f == cv2.bilateralFilter:
            denoised_img = f(image, 9, 75, 75)
        elif f == cv2.fastNlMeansDenoising:
            denoised_img = f(image, None, 10, 7, 21)
        population.append(denoised_img)
    return population

# Main function to execute hybrid bat-genetic algorithm
def hybrid_bat_genetic_algorithm(noisy_image, original_image):
    # Step 1: Initialize population
    population = apply_filters(noisy_image)
    fitness = [calculate_fitness(original_image, ind) for ind in population]

    global_best = population[np.argmax(fitness)]
    velocity = [np.zeros_like(noisy_image) for _ in range(num_bats)]

    for itr in range(max_iterations):
        print(f"Iteration: {itr}")  # Debugging iteration number
        frequency = np.random.uniform(freq_min, freq_max)

        # Bat algorithm position update
        new_population = bat_algorithm_update_position(population, global_best, frequency, velocity)

        # Crossover step
        print("Performing crossover...")  # Debugging crossover step
        new_population = [crossover(new_population[i], new_population[(i + 1) % len(new_population)]) for i in range(len(new_population))]
        print("Crossover completed successfully")

        # Mutation step
        print("Performing mutation...")
        new_population = [mutate(ind) for ind in new_population]
        print("Mutation completed successfully")

        # Recalculate fitness and update global best
        new_fitness = [calculate_fitness(original_image, ind) for ind in new_population]
        local_best = new_population[np.argmax(new_fitness)]

        if calculate_fitness(original_image, local_best) > calculate_fitness(original_image, global_best):
            global_best = local_best

    return global_best

# Load original and noisy images (replace with actual paths or images)
original_image1 = cv2.imread('/content/drive/My Drive/Sample/original.png', 0)  # Grayscale original
noisy_image1 = cv2.imread('/content/drive/My Drive/Sample/blur.png', 0)        # Grayscale noisy image

# Set the desired common size
common_size = (500, 500)

# Resize both images
image1_resized = cv2.resize(original_image1, common_size)
image2_resized = cv2.resize(noisy_image1, common_size)

# Save the resized images
cv2.imwrite("resized_image1.jpg", image1_resized)
cv2.imwrite("resized_image2.jpg", image2_resized)

# Run the hybrid algorithm
denoised_image = hybrid_bat_genetic_algorithm(image1_resized, image2_resized)

# Save or display the result
cv2.imwrite('/content/drive/My Drive/Sample/denoised_image.png', denoised_image)