# -*- coding: utf-8 -*-
"""QuickSort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12FFOqdt_3pKkQ_zStcKLnOwPpcHfzxKJ
"""

# Function to partition the array into two halves
def partition(arr, low, high):
    pivot = arr[high]  # Choosing the last element as the pivot
    i = low - 1  # Index of the smaller element

    for j in range(low, high):
        # If the current element is smaller than or equal to the pivot
        if arr[j] <= pivot:
            i += 1  # Increment the index of the smaller element
            arr[i], arr[j] = arr[j], arr[i]  # Swap elements

    # Swap the pivot element with the element at i+1
    arr[i + 1], arr[high] = arr[high], arr[i + 1]

    return i + 1  # Return the partitioning index

# Quick sort function
def quickSort(arr, low, high):
    if low < high:
        # Partition the array and get the pivot index
        pi = partition(arr, low, high)

        # Print the array after each partition
        print(f"Array after partitioning with pivot {arr[pi]}: {arr}")

        # Recursively sort elements before and after the partition
        quickSort(arr, low, pi - 1)  # Sort the left side of the pivot
        quickSort(arr, pi + 1, high)  # Sort the right side of the pivot

# Driver code to test the Quick Sort implementation
arr = [34, 25, 12, 22, 11, 64, 90]
print("Original array:", arr)
quickSort(arr, 0, len(arr) - 1)
print("Sorted array:", arr)