# -*- coding: utf-8 -*-
"""Merge_Sort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19kfi4gbDKcu-EC4FxCIn1KXlG6iLhXff
"""

# Function to merge two halves
def merge(left, right):
    merged = []
    i = j = 0

    # Compare elements from left and right arrays and merge them in order
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1

    # Append remaining elements from left array, if any
    while i < len(left):
        merged.append(left[i])
        i += 1

    # Append remaining elements from right array, if any
    while j < len(right):
        merged.append(right[j])
        j += 1

    # Print the merged array after each merge step
    print("Merged:", merged)

    return merged

# Function to implement merge sort
def mergeSort(arr):
    # Base case: if the array has only one element or is empty, it's already sorted
    if len(arr) <= 1:
        return arr

    # Print the array before splitting
    print(f"Splitting: {arr}")

    # Find the middle of the array to split it into two halves
    mid = len(arr) // 2

    # Recursively sort the two halves
    left_half = mergeSort(arr[:mid])
    right_half = mergeSort(arr[mid:])

    # Merge the sorted halves
    return merge(left_half, right_half)

# Driver code to test the merge sort implementation
arr = [34, 25, 12, 22, 11, 64, 90]
print("Original array:", arr)
sorted_arr = mergeSort(arr)
print("Sorted array:", sorted_arr)