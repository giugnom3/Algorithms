# -*- coding: utf-8 -*-
"""Optimized_BubbleSort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AY81h0wtWMpI3hmkPbUklO86LjGZNEM6
"""

def bubbleSort(arr):
    n = len(arr)  # Length of the array

    # Outer loop to traverse through the array
    for i in range(n):
        swapped = False  # Flag to track if any swaps are made

        # Inner loop to compare adjacent elements
        for j in range(0, n-i-1):

            # If the current element is greater than the next one, swap them
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True  # Set flag to True if a swap is made

        # Print the array after each pass (for debugging purposes)
        print("After pass", i+1, ":", arr)

        # If no swaps were made in this pass, the array is already sorted
        if not swapped:
            print("Array is sorted after pass", i+1)
            break  # Exit the loop early

    return arr

# Driver code to test above
# arr = [64, 25, 12, 22, 11]
arr = [11, 12, 22, 25, 64]
print("Original array:", arr)
sorted_arr = bubbleSort(arr)
print("Sorted array:", sorted_arr)